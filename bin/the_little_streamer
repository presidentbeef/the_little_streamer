#!/usr/bin/env ruby
#This is a simple Sinatra application to play mp3/ogg files through a browser
#using the HTML5 audio tag

require 'rubygems'
require 'taglib2'
require 'sinatra'
require 'cgi'
require 'pathname'

#Supply a directory with all the music in it
abort "Point me to the music!" unless ARGV[0]

#Wrap up in HTML
def html body
  <<-HTML
    <html>
      <head>
        <style type="text/css">
          #{css}
        </style>
        <title>The Little Streamer</title>
      </head>
      <body>
        #{body}
      </body>
      <script>
      if(document.getElementById('artist')) {
        window.onload = function() {
         var artist = document.getElementById('artist').innerHTML;
         var title = document.getElementById('title').innerHTML;
         document.title = title + " by " + artist;
        }
      }
      </script>
    </html>
  HTML
end

def css
  <<-CSS
  body {
    font-family: Helvetica,Verdana,Arial,sans-serif;
    font-size: 13pt;
  }

  span#title {
    font-size: 14pt;
    font-weight: bold;
  }

  span#artist {
    font-size: 14pt;
    font-weight: bold;
  }

  span#album {
    font-style: italic;
  }

  div#playlist {
    float: left;
    margin-top: 15px;
    height: 80%;
    overflow: auto;
    text-align: left;
  }

  div#playerbox {
    float: left;
    text-align: center;
  }
  CSS
end

#Create a link
def link root, path, text = path, params = {}
  full_path = root.split('/').map! {|r| CGI.escape r }.join('/') << "/" << CGI.escape(path)
  params = params.map { |k, v| "#{k}=#{v}" }.join "&"
  "<a href=\"#{full_path}?#{params}\">#{text}</a>"
end

#Audio tag
def audio path
  <<-HTML
  <audio id='player' onEnded='javascript:play_next()' src=#{("/" << CGI.escapeHTML(path)).inspect} autobuffer controls autoplay >
    You need the power of HTML5!
  </audio>
  <script type="text/javascript">
    document.getElementById('player').volume = 0.3;
  </script>
  HTML
end

#HTML for displaying playlist
def playlist_html songs
  list = []

  songs.each_with_index do |song, i|
    list << "<li><a href=\"javascript:play_index(#{i})\">#{song.artist} - #{song.title}</a></li>"
  end

  <<-HTML
    <div style="clear:both">&nbsp;</div>
    <div id="playlist">
      <ol>
        #{list.join}
      </ol>
    </div>
  HTML
end

#Javascript for playlist
def playlist_js songs
  <<-JAVASCRIPT
  <script type="text/javascript">
    var player = document.getElementById('player');
    var artist = document.getElementById('artist');
    var album = document.getElementById('album');
    var title = document.getElementById('title');
    var playlist = [#{songs.map { |s| song_to_js s }.join "," }]
    var current_song = 0;

    play_next = function(reverse) {
      if(reverse && current_song > 0)
        current_song--;
      else if(!reverse && current_song < playlist.length)
        current_song++;
      else
        return;

      play_current();
    }

    play_current = function() {
      var song = playlist[current_song];
      player.src = song.path;
      artist.innerHTML = song.artist
      album.innerHTML = song.album
      title.innerHTML = song.title
      document.title = song.title + " by " + song.artist;
      player.play();
    }

    play_index = function(index) {
      current_song = index;
      play_current();  
    }
  </script>
  JAVASCRIPT
end

#Javascript for a song
def song_to_js song
  <<-JAVASCRIPT
  { artist: #{song.artist.inspect},
    album: #{song.album.inspect},
    title: #{song.title.inspect},
    path: #{(CGI.escapeHTML "/" << song.path).inspect} }
  JAVASCRIPT
end

#Back/forward links
def prev_and_next
  "<a href='javascript:play_next(true)'>Prev</a>&nbsp;&nbsp;&nbsp;<a href='javascript:play_next()'>Next</a>"
end

#Output HTML for player
def player_html songs
  html <<-HTML
    <div id="playerbox">
      #{song_info songs.first}<br/>
      #{audio songs.first.path}<br/>
      #{prev_and_next if songs.length > 1}
      #{playlist_js songs}
      #{playlist_html songs if songs.length > 1}
    </div>
  HTML
end

def play_all limit = 100, order = "normal"
  songs = []

  case order
  when "random"
    Music.values.each do |artist|
      artist.values.each do |album|
        album.values.each do |song|
          songs << song
        end
      end
    end

    songs.shuffle!
  else
    Music.values.each do |artist|
      artist.values.each do |album|
        album.values.sort_by { |s| s.track }.each do |song|
          songs << song
        end
      end
    end
  end

  player_html songs[0..limit.to_i]
end

#HTML for playing all songs by artist
def play_artist artist, order = "normal"
  songs = []

  case order
  when "random"
    Music[artist].each_value do |album|
      album.each_value do |song|
        songs << song
      end
    end

    songs.shuffle!
  else
    Music[artist].each_value do |album|
      album.values.sort_by { |s| s.track }.each do |song|
        songs << song
      end
    end
  end

  player_html songs
end

#HTML for playing all songs on an album
def play_album artist, album, order = "normal"

  case order
  when "random"
    songs = Music[artist][album].values.shuffle!
  else
    songs = Music[artist][album].values.sort_by { |s| s.track }
  end

  player_html songs
end

#HTML for song information header
def song_info song
  "<span id='title'>#{song.title}</span> by <span id='artist'>#{song.artist}</span><br/><span id='album'>#{song.album}</span>"
end

#Storing all music information in here
Music = Hash.new do |h,k|
  h[k] = Hash.new do |hash, key|
    hash[key] = Hash.new
  end
end

#Song information
Song = Struct.new :artist, :album, :title, :track, :path

#Used to figure out path to music files
root = Pathname.new ARGV[0]

#Make song files public
set :public, ARGV[0]

#Make sure Sinatra sings
set :run, true

#Grab information from all the song files
Dir.glob "#{ARGV[0]}/**/*.{mp3,ogg}", File::FNM_CASEFOLD do |file|
  begin
    info = TagLib2::File.new(file)

    artist, album, title, track = info.artist, info.album, info.title, info.track
    artist ||= "Unknown"
    album ||= "Unknown"
    info = nil

    if title
      [artist, album, title].each { |i| i.tr!('/', '-') }
      Music[artist][album][title] = Song.new(artist, album, title, track, Pathname.new(file).relative_path_from(root).to_s)
    end
  rescue Exception => e
    $stderr.puts e if $DEBUG
  end
end

GC.start #Clean up after TagLib2

#List artists
get '/' do
  path = '/artist/'
  html <<-HTML
    (Random
    #{link("/", "all", "10", :limit => 10, :order => :random)}
    #{link("/", "all", "50", :limit => 50, :order => :random) }
    #{link("/", "all", "100", :limit => 100, :order => :random) })<br/>

    #{Music.keys.sort.map { |a| link path, a }.join "<br/>"}<br/><br/>
  HTML
end

get '/all' do
  play_all params["limit"], params["order"]
end

#List albums by given artist
get '/artist/:artist/?' do |artist|
  unless Music[artist].empty?
    path = "/artist/#{artist}/album/"
    html Music[artist].keys.sort.map { |a| link path, a }.join("<br/>") << "<br/><br/>" <<
      link("/artist/#{artist}/", "play", "Play All") << " - " <<
      link("/artist/#{artist}/", "play", "Randomly", :order => :random)

  else
    html "Could not find <b>#{artist}</b>."
  end
end

#Play songs by given artist
get '/artist/:artist/play/?' do |artist|
  unless Music[artist].empty?
    play_artist artist, params["order"]
  else
    html "Could not find <b>#{artist}</b>."
  end
end

#List songs on given album
get '/artist/:artist/album/:album/?' do |artist, album|
  unless Music[artist][album].empty?
    path = "/artist/#{artist}/album/#{album}/song/"
    html Music[artist][album].values.sort_by { |s| s.track || 0}.map { |s| link path, s.title }.join("<br/>") << "<br/><br/>" <<
      link("/artist/#{artist}/album/#{album}/", "play", "Play All") << " - " <<
      link("/artist/#{artist}/album/#{album}/", "play", "Randomly", :order => :random)
  else
    html "Could not find <b>#{album}</b> for <b>#{artist}</b>."
  end
end

#Play all songs from a given album
get '/artist/:artist/album/:album/play/?' do |artist, album|
  if Music[artist][album]
    play_album artist, album, params["order"]
  else
    html "Could not find <b>#{album}</b> by <b>#{artist}</b>."
  end
end

#Play song!
get '/artist/:artist/album/:album/song/:song/?' do |artist, album, title|
  if song = Music[artist][album][title]
    html <<-HTML
      #{song_info song}<br/>
      #{audio song.path}
    HTML
  else
    html "Could not find <b>#{title}</b> on <b>#{album}</b> by <b>#{artist}</b>."
  end
end
